From 2f4d66eb64197140db5cd914c76d45fbe2542383 Mon Sep 17 00:00:00 2001
From: Robin <me@invokr.org>
Date: Fri, 7 Oct 2016 12:17:00 +0200
Subject: [PATCH 1/2] Stub out code, remove broken gtest download

---
 2.6.1/autogen.sh                                   | 14 ++--
 2.6.1/src/google/protobuf/stubs/atomicops.h        |  5 +-
 .../stubs/atomicops_internals_emscripten.h         | 97 ++++++++++++++++++++++
 2.6.1/src/google/protobuf/stubs/common.cc          | 17 ++++
 2.6.1/src/google/protobuf/stubs/platform_macros.h  |  3 +
 5 files changed, 128 insertions(+), 8 deletions(-)
 create mode 100644 2.6.1/src/google/protobuf/stubs/atomicops_internals_emscripten.h

diff --git a/2.6.1/autogen.sh b/2.6.1/autogen.sh
index c3e026d..9c81f3a 100755
--- a/2.6.1/autogen.sh
+++ b/2.6.1/autogen.sh
@@ -17,11 +17,11 @@ fi
 
 # Check that gtest is present.  Usually it is already there since the
 # directory is set up as an SVN external.
-if test ! -e gtest; then
-  echo "Google Test not present.  Fetching gtest-1.5.0 from the web..."
-  curl http://googletest.googlecode.com/files/gtest-1.5.0.tar.bz2 | tar jx
-  mv gtest-1.5.0 gtest
-fi
+#if test ! -e gtest; then
+#  echo "Google Test not present.  Fetching gtest-1.5.0 from the web..."
+#  curl http://googletest.googlecode.com/files/gtest-1.5.0.tar.bz2 | tar jx
+#  mv gtest-1.5.0 gtest
+#fi
 
 set -ex
 
@@ -31,8 +31,8 @@ set -ex
 #   probably change their default to match, then this will be unnecessary.
 #   One of these mappings converts the debug configuration and the other
 #   converts the release configuration.  I don't know which is which.
-sed -i -e 's/RuntimeLibrary="5"/RuntimeLibrary="3"/g;
-           s/RuntimeLibrary="4"/RuntimeLibrary="2"/g;' gtest/msvc/*.vcproj
+#sed -i -e 's/RuntimeLibrary="5"/RuntimeLibrary="3"/g;
+#           s/RuntimeLibrary="4"/RuntimeLibrary="2"/g;' gtest/msvc/*.vcproj
 
 # TODO(kenton):  Remove the ",no-obsolete" part and fix the resulting warnings.
 autoreconf -f -i -Wall,no-obsolete
diff --git a/2.6.1/src/google/protobuf/stubs/atomicops.h b/2.6.1/src/google/protobuf/stubs/atomicops.h
index b1336e3..149e1f6 100644
--- a/2.6.1/src/google/protobuf/stubs/atomicops.h
+++ b/2.6.1/src/google/protobuf/stubs/atomicops.h
@@ -164,8 +164,11 @@ Atomic64 Release_Load(volatile const Atomic64* ptr);
 #define GOOGLE_PROTOBUF_ATOMICOPS_ERROR \
 #error "Atomic operations are not supported on your platform"
 
+// Emscripten support
+#if defined(EMSCRIPTEN)
+#include <google/protobuf/stubs/atomicops_internals_emscripten.h>
 // ThreadSanitizer, http://clang.llvm.org/docs/ThreadSanitizer.html.
-#if defined(THREAD_SANITIZER)
+#elif defined(THREAD_SANITIZER)
 #include <google/protobuf/stubs/atomicops_internals_tsan.h>
 // MSVC.
 #elif defined(_MSC_VER)
diff --git a/2.6.1/src/google/protobuf/stubs/atomicops_internals_emscripten.h b/2.6.1/src/google/protobuf/stubs/atomicops_internals_emscripten.h
new file mode 100644
index 0000000..f6a2385
--- /dev/null
+++ b/2.6.1/src/google/protobuf/stubs/atomicops_internals_emscripten.h
@@ -0,0 +1,97 @@
+// This file is an internal atomic implementation, use atomicops.h instead.
+
+#ifndef GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_EMSCRIPTEN_H_
+#define GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_EMSCRIPTEN_H_
+
+namespace google {
+namespace protobuf {
+namespace internal {
+
+// 32-bit low-level operations on any platform.
+
+inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,
+                                         Atomic32 old_value,
+                                         Atomic32 new_value) {
+  Atomic32 old_reg = *ptr;
+  if (old_reg == old_value)
+    *ptr = new_value;
+
+  return old_reg;
+}
+
+inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,
+                                         Atomic32 new_value) {
+  Atomic32 prev = *ptr;
+  *ptr = new_value;
+  return prev;
+}
+
+inline Atomic32 NoBarrier_AtomicIncrement(volatile Atomic32* ptr,
+                                          Atomic32 increment) {
+  Atomic32 prev = *ptr;
+  *ptr = *ptr + increment;
+  return prev;
+}
+
+inline Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
+                                        Atomic32 increment) {
+ Atomic32 prev = *ptr;
+  *ptr = *ptr + increment;
+  return prev;
+}
+
+inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
+                                       Atomic32 old_value,
+                                       Atomic32 new_value) {
+  Atomic32 old_reg = *ptr;
+  if (old_reg == old_value)
+    *ptr = new_value;
+
+  return old_reg;
+}
+
+inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
+                                       Atomic32 old_value,
+                                       Atomic32 new_value) {
+  Atomic32 old_reg = *ptr;
+  if (old_reg == old_value)
+    *ptr = new_value;
+
+  return old_reg;
+}
+
+inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {
+  *ptr = value;
+}
+
+inline void MemoryBarrier() {
+
+}
+
+inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {
+    *ptr = value;
+}
+
+inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {
+  *ptr = value;
+}
+
+inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {
+  return *ptr;
+}
+
+inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {
+  Atomic32 value = *ptr;
+  return value;
+}
+
+inline Atomic32 Release_Load(volatile const Atomic32* ptr) {
+  return *ptr;
+}
+
+}  // namespace internal
+}  // namespace protobuf
+}  // namespace google
+
+
+#endif // GOOGLE_PROTOBUF_ATOMICOPS_INTERNALS_EMSCRIPTEN_H_
diff --git a/2.6.1/src/google/protobuf/stubs/common.cc b/2.6.1/src/google/protobuf/stubs/common.cc
index 1e02b22..b3771f6 100644
--- a/2.6.1/src/google/protobuf/stubs/common.cc
+++ b/2.6.1/src/google/protobuf/stubs/common.cc
@@ -44,6 +44,7 @@
 #define snprintf _snprintf    // see comment in strutil.cc
 #elif defined(HAVE_PTHREAD)
 #include <pthread.h>
+#elif defined(EMSCRIPTEN) // Emscripten doesnt have any threading support
 #else
 #error "No suitable threading library available."
 #endif
@@ -282,6 +283,22 @@ void Mutex::AssertHeld() {
 #endif
 }
 
+#elif defined(EMSCRIPTEN)
+
+struct Mutex::Internal {};
+
+Mutex::Mutex()
+ : mInternal(new Internal) {
+}
+
+Mutex::~Mutex() {}
+
+void Mutex::Lock() {}
+
+void Mutex::Unlock() {}
+
+void Mutex::AssertHeld() {}
+
 #elif defined(HAVE_PTHREAD)
 
 struct Mutex::Internal {
diff --git a/2.6.1/src/google/protobuf/stubs/platform_macros.h b/2.6.1/src/google/protobuf/stubs/platform_macros.h
index 7956d07..82e391b 100644
--- a/2.6.1/src/google/protobuf/stubs/platform_macros.h
+++ b/2.6.1/src/google/protobuf/stubs/platform_macros.h
@@ -55,6 +55,9 @@
 #elif defined(__aarch64__)
 #define GOOGLE_PROTOBUF_ARCH_AARCH64 1
 #define GOOGLE_PROTOBUF_ARCH_64_BIT 1
+#elif defined(EMSCRIPTEN)
+#define GOOGLE_PROTOBUF_ARCH_IA32 1
+#define GOOGLE_PROTOBUF_ARCH_32_BIT 1
 #elif defined(__MIPSEL__)
 #if defined(__LP64__)
 #define GOOGLE_PROTOBUF_ARCH_MIPS64 1
-- 
2.6.4 (Apple Git-63)

